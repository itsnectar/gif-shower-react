{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","props","useState","Value","setValue","onSubmit","e","preventDefault","trim","length","setCategorias","categorias","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized","GifGridItem","className","src","alt","GifGrid","loading","Cargador","setCargador","useEffect","then","useFetchGifs","GifExpertApp","category","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAACC,GAExB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KA0BA,OACI,mCACA,sBAAMC,SAhBe,SAACC,GACtBA,EAAEC,iBACCJ,EAAMK,OAAOC,OAAO,IAEnBR,EAAMS,eAAc,SAAAC,GAAU,OAAKR,GAAL,mBAAcQ,OAK5CP,EAAS,MAOb,SACI,uBACIQ,KAAK,OACLC,MAAOV,EACPW,SA3BkB,SAACR,GAC3BF,EAASE,EAAES,OAAOF,e,+BCTbG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,sBAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,UAAUZ,QARhB,kBAWZM,GAXY,4CAAH,sDCCPO,G,MAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAClC,OACI,sBAAKc,UAAU,8CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,SCHHO,EAAU,SAAC,GAAiB,IAAhBnB,EAAe,EAAfA,UAIrB,ECLwB,SAACA,GAEzB,MAAgCf,mBAAS,CACrCsB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAiBC,EAAjB,KAsBA,OAjBAC,qBAAU,WACNxB,EAAQC,GAAWwB,MAAK,SAAChB,GACrBc,EAAY,CACRf,KAAKC,EACLY,SAAQ,SAGlB,CAAEpB,IAUGqB,EDnBwBI,CAAazB,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAcpB,OACI,qCACI,oBAAIJ,UAAU,yCAAd,SAAwDhB,IACtDoB,GAAW,mBAAGJ,UAAU,mCAAb,uBACb,qBAAKA,UAAU,YAAf,SAGYH,EAAOJ,KAAK,SAAAC,GACR,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aE3B5Ce,EAAe,WAGxB,MAAoCzC,mBAAU,CAAC,oBAA/C,mBAAOS,EAAP,KAAmBD,EAAnB,KAQA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEIC,EAAWe,KAAI,SAAAkB,GACb,OAAO,cAAC,EAAD,CAAyB3B,UAAc2B,EAAvC,SAAoDA,GAArCA,YCfpCC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.f269a93b.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = (props) => { //recibe el prop, el cual contiene \r\n    //la funcion para agregar elementos al arreglo de la lista de componentes.\r\n    const [Value, setValue] = useState(''); //se define un nuevo useState para\r\n    //poder manejar la cadena insertada del input,cual se modifica value con el setValue.\r\n\r\n    //esta funcion se encarga de obtener el valor del input y actualizar el valor de Value\r\n    //e.target.value es el valor actual del input, e es el evento.\r\n    const obtenerValorInsertado = (e) => {\r\n        setValue(e.target.value);\r\n    }\r\n\r\n    //esta funcion se ejecuta al presionar enter, al presionar enter se agrega\r\n    //primero ejecuta un preventDefault(), luego ve si tiene mas de 2 caracteres\r\n    //para vaciarlo o no al agregarlo\r\n    const addValorInsertado= (e) => {\r\n        e.preventDefault();\r\n        if(Value.trim().length>2) \r\n        {\r\n            props.setCategorias(categorias => [Value,...categorias]); //añade el valor\r\n            //a las categorias, para esto importa la funcion setCategorias\r\n            //que esta definida en otro componente y le asigna ael valor\r\n            //categorias es el contenido del vector, en este caso en esta funcion no sabe el contenido\r\n            //solo sabe que hay algo despues de eso. por eso es undefined.\r\n            setValue(''); // lo vacia.\r\n        }\r\n    }\r\n//este es el contenido del componente, un input que al apretar añade Value.\r\n//onSubmit = apretar Enter \r\n    return (\r\n        <>\r\n        <form onSubmit={addValorInsertado}>\r\n            <input \r\n                type=\"text\"\r\n                value={Value}\r\n                onChange={ obtenerValorInsertado}>\r\n            </input>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n//Para que no si o si deba recibir la funcion setCategorias del componente anterior.\r\nAddCategory.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired,\r\n}\r\n","\r\n\r\nexport const getGifs = async(categoria) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=vvX8FQbEeQaH7CzxBKhSSf2LRaxTNd0W&q=${encodeURI(categoria)}&limit=10`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map (img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized.url,\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\nimport 'animate.css';\r\n \r\nexport const GifGridItem = ({id,title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInUpBig\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","//import React, {useEffect,useState}  from 'react'\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport {GifGridItem} from './GifGridItem';\r\nexport const GifGrid = ({categoria}) => { //props.categoria = {categoria}\r\n    \r\n    //const [images, setImages] = useState([]);\r\n    \r\n    const {data:images, loading} = useFetchGifs(categoria); //renombro data como images\r\n\r\n    /*\r\nEste codigo mejor lo pasamos al hook de fetchgifs po\r\n\r\n    useEffect(()=>{\r\n        getGifs(categoria).then((gifs) => {\r\n            setImages(gifs);\r\n        })\r\n    },[ categoria]); //el [] signfiica que si la categoria cambia,\r\n    //recien ahi volveria a ejecutar esta funcion de useEffects.\r\n*/\r\n\r\n//si loading estrue, meustra cargando.\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeInUpBig\">{categoria}</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\"> Cargando</p> }  \r\n            <div className=\"card-grid\">\r\n                \r\n                    {\r\n                        images.map( img => {\r\n                            return <GifGridItem key={img.id} {...img}></GifGridItem> //manda img completo,\r\n                        })\r\n                    }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState,useEffect} from 'react';\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (categoria) => {\r\n\r\n    const [Cargador, setCargador] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs(categoria).then((gifs) => {\r\n            setCargador({\r\n                data:gifs,\r\n                loading:false\r\n            });\r\n        })\r\n    },[ categoria]); //el [] signfiica que si la categoria cambia,\r\n    //recien ahi volveria a ejecutar esta funcion de useEffects.\r\n/*\r\n    setTimeout(() => {\r\n        setCargador({\r\n            data:[1,2,3,4,5],\r\n            loading:false\r\n        })\r\n    }, 3000);\r\n*/\r\n    return Cargador;\r\n}","import React,{useState} from 'react';\r\nimport {AddCategory} from './components/AddCategory';\r\nimport {GifGrid} from './components/GifGrid';\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categorias = ['poto','caca','peo'];\r\n    const [categorias, setCategorias] = useState( ['Porter Robinson']);\r\n/*\r\n    const handleAdd = () => {\r\n      setCategorias([...categorias,'raja']);\r\n    }\r\n    */\r\n    //        <button onClick={handleAdd}>Agregar</button>\r\n\r\n    return (\r\n      <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategorias={setCategorias}/>\r\n        <hr></hr>\r\n        <ol>\r\n          {\r\n            categorias.map(category => {\r\n              return <GifGrid key ={category} categoria = { category } >{category}</GifGrid>\r\n            })\r\n          }\r\n        </ol>\r\n      </>\r\n    )\r\n  }\r\n  \r\n  GifExpertApp.propTypes = {\r\n  \r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\n\n\n\nReactDOM.render(\n    <GifExpertApp></GifExpertApp>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n\n"],"sourceRoot":""}